---
version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION_TAG}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_VERSION_TAG}
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION_TAG}
    ports:
      - 8081:8081
    container_name: schema-registry
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300
    restart: unless-stopped

  kafka-client:
    image: confluentinc/cp-kafka-connect:${CONFLUENT_VERSION_TAG}
    hostname: kafka-client
    container_name: kafka-client
    depends_on:
      - zookeeper
      - broker
    command:
      - bash 
      - -c 
      - |
        echo "===> Waiting for Kafka to be ready... "
        cub kafka-ready -b broker:9092 1 60
        cd /bin
        while [ 1 -eq 1 ]
        do
         TIMESTAMP=$$(echo `date +%s`)
         COUNT=$$(($${COUNT} + 1))
         HOST="\""server-$$(( ( RANDOM % 10 )  + 1 ))"\""
         VALUE=$$(( ( RANDOM % 15 )  + 75))

         DATA=$$(echo {\"name\": \"sample.metric\", \"type\": \"rate\", \"timestamp\": $$TIMESTAMP, \"dimensions\": {\"host\": $$HOST, \"interval\": 1, \"tag\": \"sample-events\"},\"values\": {\"doubleValue\": 5.639623848362502}})
         
         echo $${DATA} | kafka-avro-console-producer --broker-list broker:9092 --property schema.registry.url=http://schema-registry:8081 --topic datadog-sample-events --property value.schema='{"name": "metric","type": "record","fields": [{"name": "name","type": "string"},{"name": "type","type": "string"},{"name": "timestamp","type": "long"}, {"name": "dimensions", "type": {"name": "dimensions", "type": "record", "fields": [{"name": "host", "type":"string"}, {"name":"interval", "type":"int"}, {"name": "tag", "type":"string"}]}},{"name": "values","type": {"name": "values","type": "record","fields": [{"name":"doubleValue", "type": "double"}]}}]}'

         DATA=$$(echo {\"name\": \"backend.server_capacity\", \"type\": \"rate\", \"timestamp\": $$TIMESTAMP, \"dimensions\": {\"host\": $$HOST, \"interval\": 1, \"tag\": \"backendServerCapacity\"},\"values\": {\"doubleValue\": $$VALUE}})
         
         echo $${DATA} | kafka-avro-console-producer --broker-list broker:9092 --property schema.registry.url=http://schema-registry:8081 --topic backend-server-capacity --property value.schema='{"name": "metric","type": "record","fields": [{"name": "name","type": "string"},{"name": "type","type": "string"},{"name": "timestamp","type": "long"}, {"name": "dimensions", "type": {"name": "dimensions", "type": "record", "fields": [{"name": "host", "type":"string"}, {"name":"interval", "type":"int"}, {"name": "tag", "type":"string"}]}},{"name": "values","type": {"name": "values","type": "record","fields": [{"name":"doubleValue", "type": "double"}]}}]}'

         DATA=$$(echo [{\"metrics\": [{\"name\": \"cache.misses\"\, \"type\": \"count\"\, \"value\": $$VALUE, \"timestamp\": $$TIMESTAMP, \"interval.ms\": 10000\, \"attributes\": {\"cache.name\": \"myCache\"\, \"host.name\": $$HOST}}]}])
         
         echo $${DATA} | kafka-console-producer --broker-list broker:9092 --topic newrelic-sample-events-no-schema

         sleep 10
        done

    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
      KAFKA_ADVERTISED_LISTENERS: ignored
      
  kafka-connect:
    image: confluentinc/cp-kafka-connect:${CONFLUENT_VERSION_TAG}
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
      - kafka-client
    ports:
      - 8083:8083
    environment:
      CONNECT_CUB_KAFKA_TIMEOUT: 300
      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/data/connect-jars'
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: 'file'
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
    volumes:
      - ./kafka-connect/secrets/connect-secrets.properties:/opt/confluent/secrets/connect-secrets.properties
      - ./kafka-connect/scripts/create-datadog-sample-sink.sh:/kafka-connect/scripts/create-datadog-sample-sink.sh
      - ./kafka-connect/scripts/create-datadog-metric-sink.sh:/kafka-connect/scripts/create-datadog-metric-sink.sh
      - ./kafka-connect/scripts/create-newrelic-metric-sink.sh:/kafka-connect/scripts/create-newrelic-metric-sink.sh
    command: 
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash 
      - -c 
      - |
        echo "===> Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-datadog-metrics:1.1.3
        confluent-hub install --no-prompt newrelic/newrelic-kafka-connector:1.0
        #
        echo "===> Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        echo "===> Waiting for Kafka Connect to start listening on kafka-connect ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://kafka-connect:8083/connectors) -eq 000 ] ; do
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://kafka-connect:8083/connectors) " (waiting for 200)"
          sleep 5
        done
        nc -vz kafka-connect 8083
        #
        sleep 1
        echo -e "\n ===> Creating Kafka Connectors"
        /kafka-connect/scripts/create-datadog-sample-sink.sh
        sleep 1
        /kafka-connect/scripts/create-datadog-metric-sink.sh
        sleep 1
        /kafka-connect/scripts/create-newrelic-metric-sink.sh
        sleep infinity
        
  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_VERSION_TAG}
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_KSQL_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_CLUSTER: 'http://kafka-connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

###############################################################################
# Keeping for reference to create JSON messages from kafkacat.
# This did not work and connectors were failing with the error 
#  ClassCastException: class java.lang.Long cannot be cast to class java.lang.Double
###############################################################################

#  kafkacat:
#    image: edenhill/kafkacat:1.6.0
#    container_name: kafkacat
#    entrypoint: 
#      - /bin/sh 
#      - -c 
#      - |
#        apk add jq;
#        apk add curl;
#        cub kafka-ready -b broker:9092 1 60;
#        echo "===> Generate data in loop forever";
#        while [ 1 -eq 1 ]; 
#          do TIMESTAMP=`date +%s`; 
#          echo '{"name":"perf.metric", "type":"rate", "timestamp": 1612336036, "dimensions": {"host": "metric.host1", "interval": 1, "tag1": "testing-data"},"values": {"doubleValue": 10.646}}' | jq -c | awk '{system("tr -dc \047[:alnum:]\047 </dev/urandom | head -c10"); printf ":%s\n", $$0;system("sleep 10");}' | kafkacat -b broker:9092 -P -K: -t datadog-sample-events;
#        done
#    restart: unless-stopped

#  kafkacat:
#    image: edenhill/kafkacat:1.6.0
#    container_name: kafkacat
#    entrypoint: 
#      - /bin/sh 
#      - -c 
#      - |
#        apk add jq;
#        apk add curl;
#        cub kafka-ready -b broker:9092 1 60;
#        sleep 60
#        echo "===> Generate data in loop forever";
#        while [ 1 -eq 1 ]; 
#          do;
#          echo '[{"metrics":"cache.misses","type":"count","value":15,"timestamp":1612850198,"interval.ms":10000,"attributes":{"cache.name":"myCache","host.name":"dev.server.com"}}]' | jq -c | awk '{system("tr -dc \047[:alnum:]\047 </dev/urandom | head -c10"); printf ":%s\n", $$0;system("sleep 10");}' | kafkacat -b broker:9092 -P -K: -t newrelic-sample-events-no-schema;
#        done
#    restart: unless-stopped
